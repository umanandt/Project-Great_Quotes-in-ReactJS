{"ast":null,"code":"var _jsxFileName = \"D:\\\\Great Quotes\\\\src\\\\components\\\\quotes\\\\QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteList = props => {\n  _s();\n\n  const history = useHistory();\n  const Location = useLocation();\n  const queryParams = new URLSearchParams(Location.search); // urlSearchparams is JS default class where we pass the querydata\n  // sort=asc   - now the variable queryParams has the valuesort = asc\n  // urlSearchParams is not react object\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const changeSortingHandler = () => {\n    history.push(\"/quotes?sort=asc\");\n    console.log(Location); // here we have hard coded the sort-asc but we can make it dynamic\n    // history can help us change/navigate the url or page\n    // it is an important hook\n    // change and manage url using usehistory\n    // useLocation returns location object\n    // that is currently loaded\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: [\"Sort \", isSortingAscending ? \"Descending\" : \"Ascending\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: props.quotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteList, \"fxKDDVOLQ2xP8dmDeRkFEsw/k5M=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"names":["Fragment","useHistory","useLocation","QuoteItem","classes","QuoteList","props","history","Location","queryParams","URLSearchParams","search","isSortingAscending","get","changeSortingHandler","push","console","log","sorting","list","quotes","map","quote","id","author","text"],"sources":["D:/Great Quotes/src/components/quotes/QuoteList.js"],"sourcesContent":["import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const Location = useLocation();\n\n  const queryParams = new URLSearchParams(Location.search);\n\n  // urlSearchparams is JS default class where we pass the querydata\n  // sort=asc   - now the variable queryParams has the valuesort = asc\n  // urlSearchParams is not react object\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const changeSortingHandler = () => {\n    history.push(\"/quotes?sort=asc\");\n\n    console.log(Location);\n    // here we have hard coded the sort-asc but we can make it dynamic\n    // history can help us change/navigate the url or page\n    // it is an important hook\n    // change and manage url using usehistory\n    // useLocation returns location object\n    // that is currently loaded\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}{\" \"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAC3B,MAAMC,OAAO,GAAGN,UAAU,EAA1B;EACA,MAAMO,QAAQ,GAAGN,WAAW,EAA5B;EAEA,MAAMO,WAAW,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAApB,CAJ2B,CAM3B;EACA;EACA;;EAEA,MAAMC,kBAAkB,GAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,MAA4B,KAAvD;;EAEA,MAAMC,oBAAoB,GAAG,MAAM;IACjCP,OAAO,CAACQ,IAAR,CAAa,kBAAb;IAEAC,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAHiC,CAIjC;IACA;IACA;IACA;IACA;IACA;EACD,CAVD;;EAWA,oBACE,QAAC,QAAD;IAAA,wBACE;MAAK,SAAS,EAAEJ,OAAO,CAACc,OAAxB;MAAA,uBACE;QAAQ,OAAO,EAAEJ,oBAAjB;QAAA,oBACQF,kBAAkB,GAAG,YAAH,GAAkB,WAD5C,EACyD,GADzD;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAI,SAAS,EAAER,OAAO,CAACe,IAAvB;MAAA,UACGb,KAAK,CAACc,MAAN,CAAaC,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;QAEE,EAAE,EAAEA,KAAK,CAACC,EAFZ;QAGE,MAAM,EAAED,KAAK,CAACE,MAHhB;QAIE,IAAI,EAAEF,KAAK,CAACG;MAJd,GACOH,KAAK,CAACC,EADb;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CA1CD;;GAAMlB,S;UACYJ,U,EACCC,W;;;KAFbG,S;AA4CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}