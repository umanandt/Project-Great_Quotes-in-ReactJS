{"ast":null,"code":"var _jsxFileName = \"D:\\\\Great Quotes\\\\src\\\\pages\\\\QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport '../index.css';\nimport { Fragment } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Route } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport { useRouteMatch } from 'react-router-dom'; // use routematch is simliar  like location bit it offers\n// addtional information that we can use\n// resolve the  long path problems\n// for instance {`/quotes/${params.quoteId}/comments`}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: \"q1\",\n  author: \"Max\",\n  text: \"Learning react is great\"\n}, {\n  id: \"q2\",\n  author: \"Williams\",\n  text: \"Learning JS is great\"\n}];\n\nconst QuoteDetail = () => {\n  _s();\n\n  const params = useParams();\n  const match = useRouteMatch(); // I can simple console match to see what information does \n  // useRouteMatch offers.\n\n  console.log(match);\n  const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n\n  if (!quote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" No quote found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `/quotes/${params.quoteId}`,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\\xE7entered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `/quotes/${params.quoteId}/comments`,\n          children: \"Load Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}; // (Match.path) match is the object of useRoute hook and path\n// is - /quotes/${params.quoteId}\n\n\n_s(QuoteDetail, \"Z/bFVfTt127x9UIB6x9JiYH3soU=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"names":["Fragment","useParams","Link","Route","Comments","HighlightedQuote","useRouteMatch","DUMMY_QUOTES","id","author","text","QuoteDetail","params","match","console","log","quote","find","quoteId","path"],"sources":["D:/Great Quotes/src/pages/QuoteDetail.js"],"sourcesContent":["import '../index.css';\r\nimport { Fragment } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport { useRouteMatch } from 'react-router-dom';\r\n\r\n\r\n\r\n// use routematch is simliar  like location bit it offers\r\n// addtional information that we can use\r\n// resolve the  long path problems\r\n// for instance {`/quotes/${params.quoteId}/comments`}\r\n\r\n\r\nconst DUMMY_QUOTES = [\r\n  { id: \"q1\", author: \"Max\", text: \"Learning react is great\" },\r\n  { id: \"q2\", author: \"Williams\", text: \"Learning JS is great\" },\r\n];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  // I can simple console match to see what information does \r\n  // useRouteMatch offers.\r\n\r\n  console.log(match);\r\n\r\n  const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n\r\n  if (!quote) {\r\n    return <p> No quote found</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/*  <h1>Quote Details</h1>\r\n      <p>{params.quoteId}</p> */}\r\n\r\n      <HighlightedQuote text={quote.text} author={quote.author} />\r\n     <Route path={`/quotes/${params.quoteId}`} exact>\r\n\r\n       <div className='Ã§entered'>\r\n        <Link className='btn--flat' to={`/quotes/${params.quoteId}/comments`}>\r\n          Load Comments\r\n        </Link>\r\n      </div>\r\n     </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n// (Match.path) match is the object of useRoute hook and path\r\n// is - /quotes/${params.quoteId}\r\nexport default QuoteDetail;\r\n"],"mappings":";;;AAAA,OAAO,cAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,kBAAhC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CAIA;AACA;AACA;AACA;;;AAGA,MAAMC,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,IAAN;EAAYC,MAAM,EAAE,KAApB;EAA2BC,IAAI,EAAE;AAAjC,CADmB,EAEnB;EAAEF,EAAE,EAAE,IAAN;EAAYC,MAAM,EAAE,UAApB;EAAgCC,IAAI,EAAE;AAAtC,CAFmB,CAArB;;AAKA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAMC,MAAM,GAAGX,SAAS,EAAxB;EACA,MAAMY,KAAK,GAAGP,aAAa,EAA3B,CAFwB,CAIxB;EACA;;EAEAQ,OAAO,CAACC,GAAR,CAAYF,KAAZ;EAEA,MAAMG,KAAK,GAAGT,YAAY,CAACU,IAAb,CAAmBD,KAAD,IAAWA,KAAK,CAACR,EAAN,KAAaI,MAAM,CAACM,OAAjD,CAAd;;EAEA,IAAI,CAACF,KAAL,EAAY;IACV,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE,QAAC,QAAD;IAAA,wBAIE,QAAC,gBAAD;MAAkB,IAAI,EAAEA,KAAK,CAACN,IAA9B;MAAoC,MAAM,EAAEM,KAAK,CAACP;IAAlD;MAAA;MAAA;MAAA;IAAA,QAJF,eAKC,QAAC,KAAD;MAAO,IAAI,EAAG,WAAUG,MAAM,CAACM,OAAQ,EAAvC;MAA0C,KAAK,MAA/C;MAAA,uBAEE;QAAK,SAAS,EAAC,aAAf;QAAA,uBACC,QAAC,IAAD;UAAM,SAAS,EAAC,WAAhB;UAA4B,EAAE,EAAG,WAAUN,MAAM,CAACM,OAAQ,WAA1D;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADD;QAAA;QAAA;QAAA;MAAA;IAFF;MAAA;MAAA;MAAA;IAAA,QALD,eAcE,QAAC,KAAD;MAAO,IAAI,EAAG,GAAEL,KAAK,CAACM,IAAK,WAA3B;MAAA,uBACE,QAAC,QAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CAnCD,C,CAoCA;AACA;;;GArCMR,W;UACWV,S,EACDK,a;;;KAFVK,W;AAsCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}